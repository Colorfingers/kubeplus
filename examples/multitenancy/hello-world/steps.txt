Hello World as-a-Service
-------------------------

This example shows a basic Hello World Service creation.
The provider creates HelloWorldService from the Hello World Helm chart.
While creating the HelloWorldService, provider defines the resource requests and limits for cpu and memory resources for the Pods
that will be created as part of this service instance. The node on which the Pod(s) should be deployed is also
defined as part of this Service creation. The consumer creates instances of HelloWorldService to run a Pod that displays Hello World. 

Provider steps:
----------------
1. Create HelloWorldService
   - kubectl create -f hello-world-service-composition.yaml
2. until kubectl get crds | grep helloworldservices.platformapi.kubeplus ; do echo "Waiting for HelloworldService CRD to be registered.."; sleep 1; done
   - Wait till the HelloWorldService CRD is registered


Consumer steps:
----------------
1. Create a hello world tenant
   - Modify spec.nodeName in tenant1.yaml to refer to some node in your cluster
   - kubectl get nodes
   - Update tenant1.yaml
   - kubectl create -f tenant1.yaml

2. Verify that resource requests and limits for cpu and memory, and nodeSelector, have been set
   on the hello world Pod.
   - HELLOWORLD_POD=`kubectl get pods -A | grep hello | awk '{print $2}'`
   - HELLOWORLD_NS=`kubectl get pods -A | grep hello | awk '{print $1}'`
   - kubectl get pods $HELLOWORLD_POD -n $HELLOWORLD_NS -o json | jq -r '.spec.containers[0].resources'
   - kubectl get pods $HELLOWORLD_POD -n $HELLOWORLD_NS -o json | jq -r '.spec.nodeName'

3. Try to deploy second instance of of hello world tenant:
   - kubectl create -f tenant2.yaml

4. Check any errors
   - kubectl describe helloworldservices hello-world-tenant2


Provider steps:
----------------
1. Check the resource consumption of the tenant1 (cpu, memory, storage, network)
   - KUBEPLUS_POD=`kubectl get pods | grep kubeplus | awk '{print $1}'`

2. In a new terminal window:
    - kubectl port-forward $KUBEPLUS_POD -n default 8081:8090

3. curl -kv "http://127.0.0.1:8081/apis/kubeplus/metrics?kind=HelloWorldService&instance=hello-world-tenant1&namespace=default"


Clean up:
-----------
- As consumer:
  - kubectl delete -f tenant2.yaml
  - kubectl delete -f tenant1.yaml

- As provider:
- kubectl delete -f hello-world-service-composition.yaml
